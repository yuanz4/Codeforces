https://codeforces.com/contest/1422
B: 注意取4个数的median而不是mean
D: 要注意相邻点只需要考虑附近的4个点，因为到达其他点一定会经过相邻点，a->b + b->c <= a->c，这是一个重要的optimization。Dijkstra是一种greedy算法，visit过的点就是定了的。可以建一个struct进行sort，用lambda函数，[&]代表capture矩阵的reference
E: 从后往前进行构造：当s[i]=s[i+1]，结果只可能是s[i]+ans[i+1]或是ans[i+2]；不相等时，结果是s[i]+ans[i+1]。当相等时，结果不可能是更加之后的，比如ans[i+4]，因为这说明ans[i+4]<ans[i+2]，但是ans[i+2]已经是在那个节点最好的了，所以已经考虑之后最优的情况了。这样做的时间复杂度是O(n^2)，但是我们可以加速比较两个string的速度，我们可以研究何时比较会结束（这里字符串是反的）：
daaa
 ^ ^
^ ^
可以发现当遇到第一个和当前不一样的字符时可以比较出大小，为了统一，在最后面加上0，所以比较到末尾时也可以判断：
0aaaa
^ ^
每次我们只需要比较当前元素和suf的结尾，假如一样的话s[i]和dif，假如需要pop的话需要更新dif，变成nxt[i+2]。虽然可能i+2处的元素已经没了，比如ddccbbaa中的d，c已经没了，但是对于c来说b已经没了，所以dif记录的是a。总的来说，对于奇数个的元素，已经不会改动了，偶数个的元素还可能会改动。dif会是奇数个的字符，或是当前偶数区间中最小的字符（有点像单调栈），比如aadddccaaf中的a、d、f。当s[i]与suf结尾不同的时候，需要让dif等于suf的结尾。另外需要注意的一点是，两个被隔断的奇数字符不能合起来，比如hzzhcc中的h，因此当我们pop suf的结尾时需要做标记，说明下一次不能继续pop了，也就是说pop了zz之后下一个h不能因为和suf结尾相同而pop。最后要注意的是在compress的时候需要传reference并提取需要的元素，传值的话会超时
F: 对segment tree进行range lcm的query，在建树的时候比较暴力的做法是对每两个数做gcd然后计算lcm，但是这样太慢了。所以想到可以对每个数做prime factorization，然后合并两个数的factorization，取较大的power。可以用n/(ln(n)-1)计算有多少个prime，对于2e5有17847个，太多了。因此取sqrt(2e5)，有87个，可以接受。对于大于87的prime，每个a最多只包含一个。所以现在要对每个subsegment找到其中unique prime的乘积，比如：
index | 0  1  2  3  4  5  6
prime | 2  3  5  5  7  2  3
prev  |-1 -1 -1  2 -1  0  1
我们在query的时候会将[l, r]分成多个subsegment，这些subsegment之间也不能有重复的数字，因此我们去重应该是对于整个[l, r]而言的。这里比较厉害的做法是，对于每个数字记录下前一个相同prime的index。比如我们取[2, 5]，可以发现5出现了两次，但是其中一个5的prev>=l，因为已经有一个5在这个区间内了。因此我们只想找到在subsegment中prev<l的数，假如我们按prev对这些prime进行排序，那我们就只想找一个prefix。可以用binary search来找到那个prev的坐标，然后直接乘以prefix的production。在这里存较低位的{prime, power}可以直接用unordered_map，但是常数有点大可能会超时，所以最好写成vector。总时间是n*k (combine low) + 2*n (combine high) + q*logn (query low) + q*(logn)^2 (query high)